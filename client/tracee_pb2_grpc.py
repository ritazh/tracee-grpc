# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import tracee_pb2 as tracee__pb2


class TraceeStub(object):
  """Interface exported by the server.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RecordTrace = channel.stream_unary(
        '/tracee.Tracee/RecordTrace',
        request_serializer=tracee__pb2.Trace.SerializeToString,
        response_deserializer=tracee__pb2.Result.FromString,
        )


class TraceeServicer(object):
  """Interface exported by the server.
  """

  def RecordTrace(self, request_iterator, context):
    """A client-to-server streaming RPC.

    Accepts a stream of traces of newly created containers or processes
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TraceeServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RecordTrace': grpc.stream_unary_rpc_method_handler(
          servicer.RecordTrace,
          request_deserializer=tracee__pb2.Trace.FromString,
          response_serializer=tracee__pb2.Result.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'tracee.Tracee', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
